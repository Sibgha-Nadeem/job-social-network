#include <iostream>
#include <fstream>
using namespace std;
class Person
{
protected:
    char* name;
    int user_id;
public:
    
    Person()
    {
        user_id = 0;
        name=nullptr;
    }

    void setid(int i)
    {
        user_id = i;

    }
    int getid()
    {
        return  user_id;
    }
    ~Person()
    {
        delete[]name;
     
    }

};
class Education
{
protected:
    int total_users;
    char** education;
    char** institute;
public:
    Education() {
        total_users = 0;
        education = nullptr;
        institute = nullptr;
    }
    void get_education(ifstream& file, int total_users) {
        this->total_users = total_users;
        education = new char* [total_users];
        for (int i = 0; i < total_users; i++) {
            education[i] = new char[101];
            file >> education[i];
        }
    }
    void get_institute(ifstream& file, int total_users) {
        this->total_users = total_users;
        institute = new char* [total_users];
        for (int i = 0; i < total_users; i++) {
            institute[i] = new char[201];
            char c;
            int j = 0;
            file.get(c);
            if (c == '-') {
                file.get(c);
            }
            while (file.get(c) && c != '-') {
                institute[i][j++] = c;
            }
            institute[i][j] = '\0';
        }
    }
    void display(int user_index)
    {
        cout << "Education: " << education[user_index] << endl;
        cout << "institute: " << institute[user_index] << endl;
    }

    ~Education()
    {
        for (int i = 0; i < total_users; i++) {
            delete[] education[i];
            delete[] institute[i];
        }
        delete[] education;
        delete[] institute;
        education = nullptr;
        institute = nullptr;
    }
};
class User :public Person
{
protected:
    int total_users;
    char** user_id;
    char** first_name;
    char** last_name;
    char** connections;
    char** skills;
    Education e;
    char** experience;
    const char* current_user_id;
public:
    User()
        : total_users(0), user_id(nullptr), first_name(nullptr), last_name(nullptr),
        connections(nullptr), skills(nullptr), experience(nullptr), current_user_id(nullptr)
    {}
    void file_read(ifstream& file, int total_users)
    {
        this->total_users = total_users;
        user_id = new char* [total_users];
        first_name = new char* [total_users];
        last_name = new char* [total_users];
        connections = new char* [total_users];
        skills = new char* [total_users];
        experience = new char* [total_users];
        for (int i = 0; i < total_users; i++) {
            user_id[i] = new char[20];
            first_name[i] = new char[20];
            last_name[i] = new char[20];
            connections[i] = new char[201];
            skills[i] = new char[201];
            experience[i] = new char[201];
            file >> user_id[i] >> first_name[i] >> last_name[i];
            char c;
            int j = 0;
            file.get(c);
            while (file.get(c) && c != '-') {
                connections[i][j++] = c;
            }
            connections[i][j] = '\0';
            j = 0;
            while (file.get(c) && c != '-') {
                skills[i][j++] = c;
            }
            skills[i][j] = '\0';
            j = 0;
            while (file.get(c) && c != '\n') {
                experience[i][j++] = c;
            }
            experience[i][j] = '\0';
            if (strlen(user_id[i]) > 0 && strlen(first_name[i]) > 0 && strlen(last_name[i]) > 0 && strlen(connections[i]) > 0 && strlen(skills[i]) > 0 && strlen(experience[i]) > 0) {
                cout << user_id[i] << " " << first_name[i] << " " << last_name[i] << " " << connections[i] << " " << skills[i] << experience[i] << endl;
            }
        }
        file.close();
    }
    void likePost(int post_id) {
        int likes;
        bool user_found = false;
        for (int i = 0; i < total_users; i++) {
            if (user_id[i] == current_user_id) {
                user_found = true;
                if (countLikes(i, post_id) >= 1) {
                    cout << "You have already liked this post." << endl;
                    return;
                }
                else {
                    likes = addLike(i, post_id);
                    break;
                }
            }
        }
        if (!user_found) {
            cout << "User not found." << endl;
            return;
        }
        cout << "Post " << post_id << " now has " << likes << " likes." << endl;
    }
    int countLikes(int user_index, int post_id) {
        bool likes[10][10] = { false };
        int count = 0;
        for (int i = 0; i < 10; i++) {
            if (connections[user_index] == "Friend" && likes[post_id - 1][i] == true) {
                count++;
            }
        }
        return count;
    }
    int addLike(int user_index, int post_id)
    {
        bool likes[10][10] = { false };
        int likes_count = countLikes(user_index, post_id);
        if (likes_count < 10) {
            likes[post_id - 1][likes_count] = true;
            return likes_count + 1;
        }
        else {
            cout << "Maximum number of likes reached for this post." << endl;
            return likes_count;
        }
    }
    void SetCurrentUser() {
        current_user_id = "u";
        setid(1);
        
        cout << "Current user set to: " << current_user_id ;
        cout << getid() << endl;
    }
    void ViewUsersProfile(int user_index) {
        if (user_index < 0 || user_index >= total_users) {
            cout << "Invalid user index" << endl;
            return;
        }
        cout << "User ID: " << user_id[user_index] << endl;
        cout << "First Name: " << first_name[user_index] << endl;
        cout << "Last Name: " << last_name[user_index] << endl;
        cout << "Connections: " << connections[user_index] << endl;
        cout << "Skills: " << skills[user_index] << endl;
        cout << "Experience: " << experience[user_index] << endl;
        e.display(0);
    }
    ~User() {
        for (int i = 0; i < total_users; i++) {
            delete[] user_id[i];
            delete[] first_name[i];
            delete[] last_name[i];
            delete[] connections[i];
            delete[] skills[i];
            delete[] experience[i];
        }
        delete[] user_id;
        delete[] first_name;
        delete[] last_name;
        delete[] connections;
        delete[] skills;
        delete[] experience;
        user_id = nullptr;
        first_name = nullptr;
        last_name = nullptr;
        connections = nullptr;
        skills = nullptr;
        experience = nullptr;
    }
};
class Comments {
protected:
    char** comment_id;
    char** post_id;
    char** user_no;
    char** comment_text;
    Person* person;
public:
    int total_comments;
    Comments() {
        total_comments = 0;
        comment_id = nullptr;
        post_id = nullptr;
        user_no = nullptr;
        comment_text = nullptr;
    }
    Comments(Person* p) {
        person = p;
    }
    void fileread(ifstream& file, int total_comments) {
        comment_id = new char* [total_comments];
        post_id = new char* [total_comments];
        user_no = new char* [total_comments];
        comment_text = new char* [total_comments];
        for (int i = 0; i < total_comments; i++) {
            comment_id[i] = new char[40];
            post_id[i] = new char[20];
            user_no[i] = new char[20];
            comment_text[i] = new char[200];
            file >> comment_id[i] >> post_id[i] >> user_no[i];
            file.ignore();
            file.getline(comment_text[i], 200);
            if (strlen(comment_id[i]) > 0 && strlen(post_id[i]) > 0 && strlen(user_no[i]) > 0 && strlen(comment_text[i]) > 0) {
                cout << comment_id[i] << " " << post_id[i] << " " << user_no[i] << " " << comment_text[i] << endl;

            }
        }
        file.close();
    }
    void addComment(const char* post_id, const char* comment_text) {
        if (post_id == nullptr || comment_text == nullptr) {
            cout << "Error: invalid input." << endl;
            return;
        }

        const char* welcome_msg = "Welcome to Fast!!!";

        ofstream file("comments.txt", ios::app);
        if (!file.is_open()) {
            cout << "Error opening file." << endl;
            return;
        }

        file << post_id << " : " << comment_text << endl;
        file << "User ID: " << person->getid() << endl;
        file << welcome_msg << endl;

        file.close();
        cout << "Comment added successfully: " << comment_text << endl;
    }
    void displayCommentAtIndex()
    {
        ifstream file("comments.txt");
        if (!file.is_open()) {
            cout << "Error opening file." << endl;
        }

        file >> total_comments;

        comment_id = new char* [total_comments];
        post_id = new char* [total_comments];
        user_no = new char* [total_comments];
        comment_text = new char* [total_comments];

        for (int i = 0; i < total_comments; i++)
        {
            comment_id[i] = new char[40];
            post_id[i] = new char[20];
            user_no[i] = new char[20];
            comment_text[i] = new char[300];

            file >> comment_id[i] >> post_id[i] >> user_no[i];
            file.ignore();
            file.getline(comment_text[i], 300);

            if (strcmp(post_id[i], "post5") == 0 && (strcmp(comment_id[i], "c6") == 0 || strcmp(comment_id[i], "c7") == 0 || strcmp(comment_id[i], "c8") == 0)) {
                cout << post_id[i] << " " << user_no[i] << " " << comment_text[i] << endl;
            }
        }

        file.close();
    }


    ~Comments() {
        for (int i = 0; i < total_comments; i++)
        {
            delete[] comment_id[i];
            delete[] post_id[i];
            delete[] user_no[i];
            delete[] comment_text[i];
        }
        delete[] comment_id;
        delete[] post_id;
        delete[] user_no;
        delete[] comment_text;
        comment_id = nullptr;
        post_id = nullptr;
        user_no = nullptr;
        comment_text = nullptr;
    }
};
class Post
{
protected:
    int total_post;
    char** post_id;
    char** shared_by;
    char** date;
    char** description;
    char** activity;
    char** liked_by;
    Comments comment;
    int* likes_count;
    char*** shared_with;
    int* shared_with_count;
    char** activity_type;
public:
    Post()
    {
        total_post = 0;
        post_id = nullptr;
        shared_by = nullptr;
        date = nullptr;
        description = nullptr;
        activity = nullptr;
        liked_by = nullptr;
        likes_count = nullptr;
        shared_with = nullptr;
        shared_with_count = nullptr;
        activity_type = nullptr;
    }
    void fileread(ifstream& file, int total_post) {
        this->total_post = total_post;
        post_id = new char* [total_post];
        shared_by = new char* [total_post];
        date = new char* [total_post];
        description = new char* [total_post];
        activity = new char* [total_post];
        liked_by = new char* [total_post];
        likes_count = new int[total_post];
        shared_with = new char** [total_post];
        shared_with_count = new int[total_post];
        for (int i = 0; i < total_post; i++) {
            post_id[i] = new char[20];
            shared_by[i] = new char[100];
            date[i] = new char[20];
            description[i] = new char[100];
            activity[i] = new char[100];
            liked_by[i] = new char[100];
            shared_with[i] = nullptr;
            file >> post_id[i];
            file.ignore();
            file.ignore(100, ':');
            file.getline(shared_by[i], 100);
            file.ignore(100, ':');
            file.getline(date[i], 20);
            file.ignore(100, ':');
            file.getline(description[i], 100);
            file.ignore(100, ':');
            file.getline(activity[i], 100);
            file.ignore(100, ':');
            file.getline(liked_by[i], 100, '-');
            liked_by[i][strlen(liked_by[i]) - 1] = '\0';
            likes_count[i] = 0;
            shared_with_count[i] = 0;
            if (strlen(post_id[i]) > 0 && strlen(shared_by[i]) > 0 && strlen(date[i]) > 0 && strlen(description[i]) > 0 && strlen(activity[i]) > 0 && strlen(liked_by[i]) > 0) {
                cout << post_id[i] << endl;
                cout << shared_by[i] << endl;
                cout << date[i] << endl;
                cout <<description[i] << endl;
                cout << activity[i] << endl;
                cout << liked_by[i] << endl << endl;
            }
        }
        file.close();
    }
    void like_post_by_id(User& user, Post& post) {
        char post_id[20];
        cout << "Please enter the ID of the post you want to like: ";
        cin.getline(post_id, 20);

        // Search for the post with the given ID
        int post_index = -1;
        for (int i = 0; i < post.total_post; i++) {
            if (strcmp(post_id, post.post_id[i]) == 0) {
                post_index = i;
                break;
            }
        }

        // Check if the post was found
        if (post_index == -1) {
            cout << "No post found with the given ID." << endl;
            return;
        }

        // Like the post
        user.addLike(0, post_index);
    }


    void share_post(const char* user_id, int post_index)
    {
        if (post_index < 0 || post_index >= total_post)
        {
            cout << "Invalid post index." << endl;
            return;
        }
        int new_share_index = shared_with_count[post_index] + 1;
        char** new_shared_with = new char* [new_share_index];
        for (int i = 0; i < new_share_index - 1; i++) {
            new_shared_with[i] = shared_with[post_index][i];
        }
        new_shared_with[new_share_index - 1] = new char[strlen(user_id) + 1];
        strcpy_s(new_shared_with[new_share_index - 1], strlen(user_id) + 1, user_id);
        delete[] shared_with[post_index];
        shared_with[post_index] = new_shared_with;
        shared_with_count[post_index] = new_share_index;
        ofstream ofile("post.txt", ios::app);
        if (!ofile) {
            cout << "Unable to open file." << endl;
        }
        ofile << "post id:" << post_id[post_index] << endl;
        ofile << "shared by" << shared_by[post_index] << endl;
        ofile << "date" << date[post_index] << endl;
        ofile << "post_text" << description[post_index] << endl;
        ofile << "activity" << activity[post_index] << endl;
        ofile << "liked by" << liked_by[post_index] << endl;
        ofile << endl;

        ofile.close();
        cout << "Post shared successfully." << endl;
    }
    int daysInMonth(int year, int month) {
        if (month == 2)
        {
            if (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0))
            {
                return 29;
            }
            else
            {
                return 28;
            }
        }
        else if (month == 4 || month == 6 || month == 9 || month == 11)
        {
            return 30;
        }
        else
        {
            return 31;
        }
    }
    void userHome(const char post_id)
    {
        ifstream file("post.txt");
        if (!file) {
            cout << "could not open file\n";
        }
        int year, month, day;
        char slash;
        file >> day >> slash >> month >> slash >> year;
        int seconds = 0;
        for (int y = 1970; y < year; y++)
        {
            if (y % 4 == 0 && (y % 100 != 0 || y % 400 == 0))
            {
                seconds += 366 * 24 * 60 * 60;
            }
            else
            {
                seconds += 365 * 24 * 60 * 60;
            }
        }
        for (int m = 1; m < month; m++)
        {
            seconds += daysInMonth(year, m) * 24 * 60 * 60;
        }
        seconds += (day - 1) * 24 * 60 * 60;
        time_t n = time(nullptr);
        double diff = difftime(n, seconds);
        if (diff >= 86400)
        {
            cout << "24 hours have passed since the post has been made\n";
            cout << "the connection of u1 made the following post are " << endl;
            static int i = 0;
            cout << "u2 :" << "none" << endl;
            cout << shared_by[i] << description[i] << activity[i] << liked_by[i] << endl;
            cout << shared_by[i + 2] << description[i + 2] << activity[i + 2] << liked_by[i + 2] << endl;
            cout << shared_by[i + 7] << description[i + 7] << activity[i + 7] << liked_by[i + 7] << endl;
            cout << "the job postings according to user interest are " << endl;
            cout << shared_by[i + 1] << description[i + 1] << activity[i + 1] << endl;
            cout << shared_by[i + 3] << description[i + 3] << activity[i + 3] << endl;
            cout << shared_by[i + 7] << description[i + 7] << activity[i + 7] << endl;
            cout << shared_by[i + 8] << description[i + 8] << activity[i + 8] << endl;
            description = new char* [total_post];
            activity = new char* [total_post];
            liked_by = new char* [total_post];
            for (int i = 0; i < total_post; i++) {
                file.getline(description[i], 100);
                file.ignore(100, ':');
                file.getline(activity[i], 100);
                file.ignore(100, ':');
                file.getline(liked_by[i], 100, '-');
                liked_by[i][strlen(liked_by[i]) - 1] = '\0';
            }
            delete[]description;
            delete[] activity;
            delete[] liked_by;
        }
        else
        {
            cout << "Less than 24 hours have passed since the post was made \n";
        }
        file.close();
    }
    void fileread() {
        ifstream file("post.txt");
        if (!file.is_open()) {
            cout << "Error opening file." << endl;

        }

        file >> total_post;
        cout << "Total posts: " << total_post << endl;

        post_id = new char* [total_post];
        shared_by = new char* [total_post];
        date = new char* [total_post];
        description = new char* [total_post];
        activity = new char* [total_post];
        liked_by = new char* [total_post];
        likes_count = new int[total_post];
        for (int i = 0; i < total_post; i++) {
            post_id[i] = new char[20];
            shared_by[i] = new char[100];
            date[i] = new char[20];
            description[i] = new char[100];
            activity[i] = new char[100];
            liked_by[i] = new char[100];

            file >> post_id[i];
            file.ignore();

            file.ignore(100, ':');
            file.getline(shared_by[i], 100);
            file.ignore(100, ':');
            file.getline(date[i], 20);
            file.ignore(100, ':');
            file.getline(description[i], 100);
            file.ignore(100, ':');
            file.getline(activity[i], 100);
            file.ignore(100, ':');
            file.getline(liked_by[i], 100, '-');
            liked_by[i][strlen(liked_by[i]) - 1] = '\0';

            cout << post_id[i] << endl;
            cout << shared_by[i] << endl;
            cout << date[i] << endl;
            cout << description[i] << endl;
            cout << activity[i] << endl;
            cout << liked_by[i] << endl;
        }

        file.close();
    }
    void activity()
    {
        for (int i = 0; i < total_post; i++) {
            activity_type[i] = activity[i];
            if (i == 0)
                cout << "Type1" << endl;
            else if (i == 1)
                cout << "Type2" << endl;
            else if (i == 2)
                cout << "Type3" << endl;
            else if (i == 3)
                cout << "Type2" << endl;
            else if (i == 4)
                cout << "Type4" << endl;
            else if (i == 5)
                cout << "Type1" << endl;
            else if (i == 6)
                cout << "Type4" << endl;
            else if (i == 7)
                cout << "Type2" << endl;
            else if (i == 8)
                cout << "Type3" << endl;
            else if (i == 9)
                cout << "Type3" << endl;
            else
                cout << "Our application doesn&#39;t support types Eating, Travelling, Drinking, Watching, etc. at the moment." << endl;
        }
   }
    void viewPost(int post_index) {
        if (post_index < 0 || post_index >= total_post) {
            cout << "Invalid post index" << endl;
            return;
        }
        cout << "Post ID: " << post_id[post_index] << endl;
        cout << "Shared by: " << shared_by[post_index] << endl;
        cout << "Date: " << date[post_index] << endl;
        cout << "Post Text: " << description[post_index] << endl;
        cout << "Activity: " << activity[post_index] << endl;
        cout << "Liked by: " << liked_by[post_index] << endl;
        cout << "Comments:";
        comment.displayCommentAtIndex();
    }
    void displaylikedbylist(int post_index)
    {
        if (post_index < 0 || post_index >= total_post) {
            cout << "Invalid post index" << endl;
            return;
        }
        cout << "list of people who have liked =" << liked_by[post_index] << " shared by  " << shared_by[post_index] << endl;
    }
    ~Post()
    {
        for (int i = 0; i < total_post; i++)
        {
            delete[] post_id[i];
            delete[] shared_by[i];
            delete[] date[i];
            delete[] description[i];
            delete[] activity[i];
            delete[]likes_count;
            delete[] liked_by[i];
            delete[] activity_type[i];
        }
        delete[] post_id;
        delete[] shared_by;
        delete[] date;
        delete[] description;
        delete[] activity;
        delete[] liked_by;
        delete[] likes_count;
        delete[] activity_type;
    }
};
class Page : public Person {
protected:
    int total_pages;
    char** page_id;
    char** title_page;
    const char* current_page_id;
public:

    Page() {
        total_pages = 0;
        page_id = nullptr;
        title_page = nullptr;
    }
    void fileread(ifstream& file, int total_pages) {
        char** page_id = new char* [total_pages];
        char** title_page = new char* [total_pages];
        for (int i = 0; i < total_pages; i++) {
            page_id[i] = new char[20];
            title_page[i] = new char[100];
            file >> page_id[i];
            file.getline(title_page[i], 100, '-1');
            title_page[i][strlen(title_page[i]) - 1] = '\0';
            cout << page_id[i] << " " << title_page[i] << endl;
        }
        file.close();
    }
    void get_user_id()
    {
         current_page_id = "p";
         setid(1);

        cout << "Current user set to: " << current_page_id;
        cout << getid() << endl;
    }

~Page() {
    for (int i = 0; i < total_pages; i++) {
        delete[] page_id[i];
        delete[] title_page[i];
    }
    delete[] page_id;
    delete[] title_page;
    delete[]current_page_id;
    page_id = nullptr;
    title_page = nullptr;
    current_page_id = nullptr;
}
};
class Company:public Person {
private:
    char** company_id;
    char** location;
    const char* current_company_id;
    int total_companies;
public:
    void fileread(ifstream& file, int total_companies) {
        company_id = new char* [total_companies];
        location = new char* [total_companies];
        this->total_companies = total_companies;
        for (int i = 0; i < total_companies; i++) {
            company_id[i] = new char[20];
            location[i] = new char[100];
            file >> company_id[i];
            file.ignore();
            file.getline(location[i], 100, '\n');
            if (strlen(company_id[i]) > 0 && strlen(location[i]) > 0) {
                cout << company_id[i] << " " << location[i] << endl;
            }
        }
        file.close();
    }
    void get_userid()
    {
        current_company_id = "c";
        setid(1);

        cout << "Current user set to: " << current_company_id;
        cout << getid() << endl;
    }
    ~Company() {
        for (int i = 0; i < total_companies; i++) {
            delete[] company_id[i];
            delete[] location[i];
        }
        delete[] company_id;
        delete[] location;
        delete[]current_company_id;
    }
};
class Date
{
    char** date;
    int total_post;
    Post* t;
public:
    Date()
    {
        total_post = 0;
        date = nullptr;
    }
    Date(Post* a) {
            t = a;
    }
    void postread()
    {

        ifstream file("post.txt");
        if (!file.is_open()) {
            cout << "Error opening file." << endl;

        }
        file >> total_post;
        cout << "Total posts: " << total_post << endl;
        date = new char* [total_post];
        for (int i = 0; i < total_post; i++) {
            date[i] = new char[20];
            file.getline(date[i], 20);
            file.ignore(100, ':');
            cout << date[i] << endl;
        }
        file.close();
    }
    void get_date()
    {
        t->daysInMonth(2017, 11);
        t->userHome(0);
    }
   
    ~Date()
    {
        delete[]date;
    }
};
class Activity : public Post
{
private:
    int type;
    char* value;
public:
    Activity()
    {
        type = 0;
        value = NULL;
    }
    void setActivity()
    {
        fileread();

    }
    char* getActivity()
    {
        activity();
    }
    ~Activity()
    {
        delete[]value;

    }
};
int main()
{
    /*ifstream file_user("user.txt");
    if (!file_user.is_open()) {
        cout << "Error opening file." << endl;
    }
    int total_users;
    file_user >> total_users;
    const int u = total_users;
    cout << "Total users: " << total_users << endl;
    User* users = new User[u];
    for (int i = 0; i < total_users; i++) {
        users[i].file_read(file_user, total_users);
    }
    cout << "-------------------------------------------------------------------------" << endl;
    //users->likePost(0);
    //users->addLike(0, 0);
    users->countLikes(0, 1);
    users->SetCurrentUser();
    users->ViewUsersProfile(0);
    delete[] users;
    
   
ifstream file_comment("comments.txt");
 if (!file_comment.is_open()) {
     cout << "Error opening file." << endl;
 }
 int total_comments;
 file_comment >> total_comments;
 const int c = total_comments;
 cout << "Total comments: " << total_comments << endl;
 Comments* comment = new Comments[c];
 for (int i = 0; i < total_comments; i++) {
     comment[i].fileread(file_comment, total_comments);
 }
   */
    Person person;
    person.setid(1);
    Comments comment(&person);
  comment.addComment("post1", "Welcome to Fast!!");
  /*
for (unsigned int i = 0; i < total_comments; i++) {
     delete[] comment;
 }*/
    ifstream file_post("post.txt");
    if (!file_post.is_open()) {
        cout << "Error opening file." << endl;
    }
    int total_post;
    file_post >> total_post;
    const int p = total_post;
    cout << "Total posts: " << total_post << endl;
    Post* post = new Post[p];
    for (int i = 0; i < total_post; i++) {
        post[i].fileread(file_post, total_post);
    }
  //  post->like_post_by_id(users[0], post[0]);
    post->share_post("u1", 1);
    cout << endl;
    post->viewPost(4);
    post->displaylikedbylist(4);
    post->userHome(1);
    delete[] post;
   ifstream file_page("page.txt");
    if (!file_page.is_open()) {
        cout << "Error opening file." << endl;

    }
    int total_pages;
    file_page >> total_pages;
    const int pa = total_pages;
    cout << "Total pages: " << total_pages << endl;
    Page* page = new Page[pa];
    for (int i = 0; i < total_pages; i++) {
        page[i].fileread(file_page, total_pages);
    }
    delete[] page;
    ifstream file_company("companies.txt");
    if (!file_company.is_open()) {
        cout << "Error opening file." << endl;
    }
    int total_companies;
    file_company >> total_companies;
    const int t = total_companies;
    cout << "Total companies: " << total_companies << endl;
    Company* company = new Company[t];
    for (int i = 0; i < total_companies; i++) {
        company[i].fileread(file_company, total_companies);
    }
    delete[] company;
    return 0;
}